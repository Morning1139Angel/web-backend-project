// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auth/pb/req_DH_params.proto

package grpc_from0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Req_DHParamsClient is the client API for Req_DHParams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Req_DHParamsClient interface {
	Client(ctx context.Context, in *ReqDHParamsRequest, opts ...grpc.CallOption) (*ReqDHParamsResponse, error)
}

type req_DHParamsClient struct {
	cc grpc.ClientConnInterface
}

func NewReq_DHParamsClient(cc grpc.ClientConnInterface) Req_DHParamsClient {
	return &req_DHParamsClient{cc}
}

func (c *req_DHParamsClient) Client(ctx context.Context, in *ReqDHParamsRequest, opts ...grpc.CallOption) (*ReqDHParamsResponse, error) {
	out := new(ReqDHParamsResponse)
	err := c.cc.Invoke(ctx, "/req_DH_params/Client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Req_DHParamsServer is the server API for Req_DHParams service.
// All implementations must embed UnimplementedReq_DHParamsServer
// for forward compatibility
type Req_DHParamsServer interface {
	Client(context.Context, *ReqDHParamsRequest) (*ReqDHParamsResponse, error)
	mustEmbedUnimplementedReq_DHParamsServer()
}

// UnimplementedReq_DHParamsServer must be embedded to have forward compatible implementations.
type UnimplementedReq_DHParamsServer struct {
}

func (UnimplementedReq_DHParamsServer) Client(context.Context, *ReqDHParamsRequest) (*ReqDHParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client not implemented")
}
func (UnimplementedReq_DHParamsServer) mustEmbedUnimplementedReq_DHParamsServer() {}

// UnsafeReq_DHParamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Req_DHParamsServer will
// result in compilation errors.
type UnsafeReq_DHParamsServer interface {
	mustEmbedUnimplementedReq_DHParamsServer()
}

func RegisterReq_DHParamsServer(s grpc.ServiceRegistrar, srv Req_DHParamsServer) {
	s.RegisterService(&Req_DHParams_ServiceDesc, srv)
}

func _Req_DHParams_Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDHParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Req_DHParamsServer).Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/req_DH_params/Client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Req_DHParamsServer).Client(ctx, req.(*ReqDHParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Req_DHParams_ServiceDesc is the grpc.ServiceDesc for Req_DHParams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Req_DHParams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "req_DH_params",
	HandlerType: (*Req_DHParamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Client",
			Handler:    _Req_DHParams_Client_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/pb/req_DH_params.proto",
}
